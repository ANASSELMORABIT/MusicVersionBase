@model PRJ_FINAL_MP09_MP03.Models.MusicViewModel
@{
    Layout = null;
}

@{
    ViewData["Title"] = "Dashboard Musical";
    
}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Dashboard Musical</title>

    <!-- Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />

    <!-- Estilo personalizado -->
    <link href="~/css/dashboard.css" rel="stylesheet" />
</head>
<body>


    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
  <div class="container-fluid">
    <a class="navbar-brand" asp-controller="Music" asp-action="Dashboard">üé∂ MusicApp</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
      aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    
    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav me-auto">
        <li class="nav-item">
          <a class="nav-link" asp-controller="Music" asp-action="Trending">Trending</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" asp-controller="Music" asp-action="Recomendaciones">Recomendaciones</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" asp-controller="Music" asp-action="Playlist">Playlist</a>
        </li>

        <li class="nav-item"></li>
          <a class="nav-link" asp-controller="Music" asp-action="Lyrics">Lyrics</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" asp-controller="Music" asp-action="TopTracksArtista">Top Tracks</a>
        </li>
      </ul>
      <ul class="navbar-nav">
        <li class="nav-item">
          <a class="nav-link" asp-controller="Account" asp-action="Profile">Profile</a>
        </li>
        <li class="nav-item">
          <a class="nav-link text-danger" asp-controller="Account" asp-action="Logout">Sign Out</a>
        </li>
      </ul>
    </div>
  </div>
</nav>

  <!-- Fondo y gradientes -->
  <div class="gradient-bg">
    <svg xmlns="http://www.w3.org/2000/svg">
      <defs>
        <filter id="goo">
          <feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur" />
          <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8" result="goo" />
          <feBlend in="SourceGraphic" in2="goo" />
        </filter>
      </defs>
    </svg>
    <div class="gradients-container">
      <div class="g1"></div>
      <div class="g2"></div>
      <div class="g3"></div>
      <div class="g4"></div>
      <div class="g5"></div>
      <div class="interactive"></div>
    </div>
  </div>

  <!-- Tu contenido del Dashboard -->
  <div class="content-container">
    <form method="get" asp-controller="Music" asp-action="BuscarTrackId" class="container mt-4 d-flex justify-content-center">
        <input type="text" name="nombreCancion" class="form-control w-50 me-2" placeholder="Buscar canci√≥n por nombre..." required />
        <button type="submit" class="btn btn-success">Buscar</button>
    </form>

    <div id="downloadResult" class="text-center mt-4"> 
        
    </div>


    <h1 class="text-center mt-4">üéµ Recomendaciones Musicales</h1>

    @if (TempData["TrackId"] != null)
    {

         <div class="alert alert-success text-center mt-4">
            
            <script>
                document.addEventListener("DOMContentLoaded", function () {
                    getTrackUrlFromApi('@TempData["TrackId"]');
                });
            </script>
        </div>
    }
    else if (TempData["Error"] != null)
    {
        <div class="alert alert-danger text-center mt-4">
            @TempData["Error"]
        </div>
    }


    @if (Model.Recommendations != null && Model.Recommendations.Any())
    {
        <div class="container mt-4">
            <div class="row row-cols-1 row-cols-md-3 g-4">
                @foreach (var rec in Model.Recommendations)
                {
                    var song = rec.recommended_song;
                    <div class="col">
                        <div class="card h-100 shadow-sm">
                            <img src="@song.song_art_image_url" class="card-img-top" alt="Imagen de @song.title">
                            <div class="card-body">
                                <h5 class="card-title">@song.title</h5>
                                <p class="card-text"><strong>Artista:</strong> @song.artist_names</p>
                                <a href="@song.url" target="_blank" class="btn btn-primary">Ver en Genius</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning text-center mt-5">
            No se encontraron recomendaciones musicales.
        </div>
    }


    
  </div> 


<script>
async function getTrackUrlFromApi(trackId) {
    
    const spotifyDataApiUrl = `https://spotify-data.p.rapidapi.com/tracks/?ids=${trackId}`;
    const encodedTrackUrl = encodeURIComponent(`https://open.spotify.com/track/${trackId}`);
    const downloaderApiUrl = `https://spotify-downloader9.p.rapidapi.com/downloadSong?songId=${encodedTrackUrl}`;


     const downloaderOptions = {
        method: 'GET',
        headers: {
            'x-rapidapi-key': '3bef8ac175msh71645f0449bf057p1bcf92jsn54089ed01768', 
            'x-rapidapi-host': 'spotify-downloader9.p.rapidapi.com'
        }
    };

    const dataOptions = {
        method: 'GET',
        headers: {
            'x-rapidapi-key': '3985f53dc8msh9c15680f95d2864p1b408ajsnc61d1713b36a',
            'x-rapidapi-host': 'spotify-data.p.rapidapi.com'
        }
    };

    const youtubeOptions = {
            method: 'GET',
            headers: {
                'x-rapidapi-key': '07adcad935msh19ddbcd92cb389bp161470jsn227dde574898',
                'x-rapidapi-host': 'youtube138.p.rapidapi.com'
            }
    };

    const youtubeMp3Options = {
        method: 'GET',
        headers: {
            'x-rapidapi-key': '1a5b9e653amsh863955825c63f0bp1558c1jsn448f2c926007',
            'x-rapidapi-host': 'youtube-mp36.p.rapidapi.com'
        }
    };
    try {
        // Obtener el MP3
        const DownloadResponse = await fetch(downloaderApiUrl, downloaderOptions);
        const DownloadResult = await DownloadResponse.json();


          if (!DownloadResult.success || !DownloadResult.data?.downloadLink) {
            throw new Error("No se pudo obtener el MP3 desde la nueva API.");
        }

        
        const mp3Url = DownloadResult.data.downloadLink;
        const fallbackTitle = DownloadResult.data.title;

        // Obtener los detalles de la canci√≥n
        const dataResponse = await fetch(spotifyDataApiUrl, dataOptions);
        const dataResult = await dataResponse.json();

        const track = dataResult.tracks?.[0];
        if (!track) {
            throw new Error("No se pudieron obtener los detalles de la canci√≥n.");
        }

        const title = track.name || fallbackTitle;
        const artists = track.artists.map(a => a.name).join(", ");
        const albumName = track.album.name;
        const imageUrl = track.album.images?.[0]?.url || "";
        const releaseDate = track.album.release_date;
        const popularity = track.popularity;

        const YoutubeVideoId = `https://youtube138.p.rapidapi.com/search/?q=${encodeURIComponent(title)}&hl=en&gl=ES`; 
        
        const youtubeResponse = await fetch(YoutubeVideoId, youtubeOptions);
        const youtubeResult = await youtubeResponse.json();
        const videoId = youtubeResult.contents?.[0]?.video?.videoId;

        const YoutubeMp3Url = `https://youtube-mp36.p.rapidapi.com/dl?id=${videoId}`;

        const youtubeResponseMp3 = await fetch(YoutubeMp3Url, youtubeMp3Options);
        const youtubeResultMp3 = await youtubeResponseMp3.json();
        const mp3UrlMp3 = youtubeResultMp3.link;
        // Mostrar card con los datos
        document.getElementById("downloadResult").innerHTML = `
            <div class="card mx-auto mt-4 shadow" style="max-width: 700px;">
                <div class="row g-0">
                    <div class="col-md-4">
                        <img src="${imageUrl}" class="img-fluid rounded-start" alt="Portada canci√≥n">
                    </div>
                    <div class="col-md-8">
                        <div class="card-body">
                            <h5 class="card-title">${title}</h5>
                            <p class="card-text"><strong>Artistas:</strong> ${artists}</p>
                            <p class="card-text"><strong>√Ålbum:</strong> ${albumName}</p>
                            <p class="card-text"><strong>Fecha de lanzamiento:</strong> ${releaseDate}</p>
                            <p class="card-text"><strong>Popularidad:</strong> ${popularity}</p>
                            <audio controls class="w-100 mt-2">
                                <source src="${mp3Url}" type="audio/mpeg">
                                Tu navegador no soporta el elemento de audio.
                            </audio>
                            <a href="${mp3UrlMp3}" download class="btn btn-primary mt-2">Descargar MP3</a>
                        </div>
                    </div>
                </div>
            </div>`;
    } catch (error) {
        document.getElementById("downloadResult").innerHTML = `
            <div class="alert alert-danger">
                ‚ùå Error al obtener datos: ${error.message}
            </div>`;
        console.error(error);
    }
}
</script>



</body>
</html>